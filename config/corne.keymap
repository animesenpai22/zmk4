#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

// Define KEYS_L and KEYS_R for hold-tap behaviors
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5 LH0 LH1 LH2  // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5 RH0 RH1 RH2  // right-hand keys
#define KEYS_T LH0 LH1 LH2 RH0 RH1 RH2  // thumb keys
#define THUMBS LH0 LH1 LH2 RH0 RH1 RH2

// Timing defines
#define HM_TAPPING_TERM 300
#define HM_TAPPING_TERM_FAST 200
#define HM_PRIOR_IDLE 150
#define TD_TAPPING_TERM 300

// Navigation shortcuts (macOS/Linux compatible)
#define MY_LEFT_W LA(LEFT)
#define MY_LEFT_L LG(LEFT)
#define MY_RIGHT_W LA(RIGHT)
#define MY_RIGHT_L LG(RIGHT)

// HYPER and MEH
#define MY_HYPER LS(LC(LG(LALT)))
#define MY_MEH LC(LG(LALT))

// Common shortcuts
#define MY_UNDO LG(Z)
#define MY_REDO LS(LG(Z))
#define MY_CUT LG(X)
#define MY_COPY LG(C)
#define MY_PASTE LG(V)

/ {
    behaviors {
        // ===== HOMEROW MODS BEHAVIORS =====
        
        // Positional homerow mods (left hand)
        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;
        };

        // Positional homerow mods (right hand)
        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;
        };

        // Positional homerow mods for shift (left)
        hm_shift_l: hm_shift_l {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
        };

        // Positional homerow mods for shift (right)
        hm_shift_r: hm_shift_r {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_L KEYS_T>;
        };

        // Non-positional homerow mods (for special cases)
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <200>;
        };

        // Original behaviors (for compatibility)
        bhml: balanced_homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <125>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            global-quick-tap;
            hold-trigger-on-release;
        };

        bhmr: balanced_homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <125>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            global-quick-tap;
            hold-trigger-on-release;
        };

        // ===== MOD MORPH BEHAVIORS =====

        // Auto mod (tap preferred hold-tap)
        am: auto_mod {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    macros {
        // Essential macros only
        email: email_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp A &kp B &kp H &kp A &kp Y &kp N5 &kp N2 &kp N4 &kp N3 &kp N1 &kp AT &kp G &kp M &kp A &kp I &kp L &kp DOT &kp C &kp O &kp M>;
        };

        anime_name: anime_name_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(A) &kp N &kp I &kp M &kp E &kp COLON &kp SPACE &kp RET &kp LS(S) &kp O &kp N &kp G &kp COLON &kp SPACE>;
        };
    };

    combos {
        compatible = "zmk,combos";

        settings_layer {
            bindings = <&mo 3>;
            key-positions = <0 1>;
            layers = <0 1 2 3>;
            timeout-ms = <50>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <15 14>;
            layers = <0 1 2 3>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <15 16>;
            layers = <0 1 2 3>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <26 29>;
            layers = <0 1 2 3>;
        };

        undo {
            bindings = <&kp LC(Z)>;
            key-positions = <13 14>;
            layers = <0 1 2 3>;
        };

        redo {
            bindings = <&kp LC(LS(Z))>;
            key-positions = <13 15>;
            layers = <0 1 2 3>;
        };

        typing {
            bindings = <&tog 4>;
            key-positions = <36 41>;
            layers = <0 1 2 3>;
        };

        close {
            bindings = <&kp LA(F4)>;
            key-positions = <4 2>;
            layers = <0 1 2 3>;
        };

        closew {
            bindings = <&kp LC(W)>;
            key-positions = <3 5>;
            layers = <0 1 2 3>;
        };

        taskmanager {
            bindings = <&kp LC(LS(ESCAPE))>;
            key-positions = <0 12>;
            layers = <0 1 2 3>;
        };

        del2 {
            bindings = <&kp DEL>;
            key-positions = <4 27>;
            layers = <0 1 2 3>;
        };

        cut {
            bindings = <&kp LC(X)>;
            key-positions = <14 16>;
            layers = <0 1 2 3>;
        };

        find {
            bindings = <&kp LC(F)>;
            key-positions = <3 26>;
            layers = <0 1 2 3>;
        };

        all {
            bindings = <&kp LC(A)>;
            key-positions = <12 13>;
            layers = <0 1 2 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp GRAVE     &kp Q         &kp W         &kp F         &kp P         &kp B             &kp J         &kp L         &kp U         &kp Y         &kp SEMI      &kp BACKSPACE
                &kp TAB       &bhml LGUI A  &bhml LALT R  &bhml LCTRL S &bhml LSHFT T &kp G             &kp M         &bhmr LSHFT N &bhmr RCTRL E &bhmr LALT I  &bhmr RGUI O  &kp APOS
                &mo 2         &kp Z         &kp X         &kp C         &kp D         &kp V             &kp K         &kp H         &kp COMMA     &kp DOT       &kp FSLH      &kp ENTER
                                                          &mt LALT ESC  &lt 1 TAB     &lt 1 SPACE      &lt 1 ENTER   &kp LSHFT     &lt 2 DEL
            >;
        };

        number_symbol {
            bindings = <
                &trans        &kp EXCL      &kp AT        &kp HASH      &kp DLLR      &kp PRCNT         &kp CARET     &kp N7        &kp N8        &kp N9        &kp ASTRK     &trans
                &trans        &bhml LGUI N1 &bhml LALT N2 &bhml LCTRL N3 &bhml LSHFT N4 &kp N5           &kp N6        &bhmr LSHFT N4 &bhmr RCTRL N5 &bhmr LALT N6 &bhmr LGUI N0 &trans
                &trans        &kp LPAR      &kp RPAR      &kp LBKT      &kp RBKT      &kp EQUAL         &kp PLUS      &kp N1        &kp N2        &kp N3        &kp MINUS     &trans
                                                          &trans        &trans        &trans            &kp ENTER     &kp N0        &kp DOT
            >;
        };

        nav {
            bindings = <
                &trans        &none         &email        &none         &anime_name   &none             &kp PAGE_UP   &kp HOME      &kp UP        &kp END       &kp KP_ASTERISK &trans
                &trans        &kp LGUI      &kp LALT      &kp LCTRL     &kp LSHFT     &none             &kp M         &kp LEFT      &kp DOWN      &kp RIGHT     &kp PRINTSCREEN &trans
                &trans        &none         &none         &none         &none         &none             &kp PAGE_DOWN &none         &none         &none         &none         &trans
                                                          &trans        &trans        &trans            &trans        &trans        &trans
            >;
        };

        settings_media {
            bindings = <
                &kp F12       &kp F1        &kp F2        &kp F3        &kp F4        &bootloader       &kp C_VOL_UP  &kp C_BRI_UP  &none         &none         &none         &bootloader
                &bt BT_CLR_ALL &kp F5       &kp F6        &kp F7        &kp F8        &out OUT_BLE      &kp C_VOL_DN  &kp C_BRI_DN  &none         &none         &none         &none
                &bt BT_CLR    &kp F9        &kp F10       &kp F11       &bt BT_NXT    &out OUT_USB      &kp C_MUTE    &none         &none         &none         &none         &none
                                                          &kp C_PREV    &kp C_PP      &kp C_NEXT        &none         &none         &none
            >;
        };

        simple_typing {
            bindings = <
                &kp GRAVE     &kp Q         &kp W         &kp F         &kp P         &kp B             &kp J         &kp L         &kp U         &kp Y         &kp SEMI      &kp BSPC
                &kp LCTRL     &kp A         &kp R         &kp S         &kp T         &kp G             &kp M         &kp N         &kp E         &kp I         &kp O         &kp APOS
                &kp LALT      &kp Z         &kp X         &kp C         &kp D         &kp V             &kp K         &kp H         &kp COMMA     &kp DOT       &kp FSLH      &kp ENTER
                                                          &kp ESC       &kp TAB       &kp SPACE         &kp ENTER     &kp LSHFT     &kp DEL
            >;
        };
    };

    // ===== ADVANCED SETTINGS =====
    // Fixed build errors - should compile successfully now

    // Layer tap settings
    &lt {
        tapping-term-ms = <300>;
        quick-tap-ms = <200>;
        flavor = "balanced";
    };

    // Caps word settings
    &caps_word {
        continue-list = <
            UNDERSCORE MINUS
            LCTRL LALT LGUI LSHFT
            RCTRL RALT RGUI RSHFT
            BACKSPACE
        >;
    };

    // ===== BEHAVIOR HELPER MACROS =====
    #define AM(hold_keycode, tap_keycode) &am hold_keycode tap_keycode
    #define AS(keycode) &am LS(keycode) keycode

    // ===== LAYER DEFINITIONS =====
};
